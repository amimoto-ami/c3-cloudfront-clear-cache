---
description: This rule contains important implementation details and best practices for the C3 Cloudfront Cache Controller WordPress plugin
globs: 
alwaysApply: false
---
# C3 CloudFront Cache Controller Implementation Guide

## Overview
C3 CloudFront Cache Controller is a WordPress plugin that manages CloudFront cache invalidation when content is published or updated. It provides both automatic invalidation based on post status changes and manual invalidation through the admin interface.

## WordPress Permalink Settings Requirement

### Critical Requirement
**The plugin requires WordPress permalink settings to be set to something other than "Plain" (default) for proper operation.**

### Technical Background
When WordPress uses the default "Plain" permalink structure:
- Post URLs are generated as `?p=123` format (e.g., `http://example.com/?p=6`)
- The `parse_url()` function returns only `/` as the path component
- Query parameters are not included in CloudFront invalidation paths
- This results in either no invalidation paths or fallback to wildcard invalidation (`/*`)

### Supported Permalink Structures
The plugin works correctly with any custom permalink structure, including:
- Post name: `http://example.com/sample-post/`
- Day and name: `http://example.com/2023/01/01/sample-post/`
- Month and name: `http://example.com/2023/01/sample-post/`
- Numeric: `http://example.com/archives/123`
- Custom structure: `http://example.com/blog/%postname%/`

### Implementation Details
The invalidation path generation process:
1. `get_permalink()` retrieves the post URL
2. `make_invalidate_path()` extracts the path component using `parse_url()`
3. For plain permalinks, this results in `/` which gets filtered out
4. When no valid paths remain, the system falls back to `/*` (full cache clear)

### Workaround for Plain Permalinks
If plain permalinks must be used, developers can implement a custom solution using the `c3_invalidation_items` filter:

```php
add_filter('c3_invalidation_items', function($items, $post) {
    if ($post && isset($_GET['p'])) {
        // Add query parameter based invalidation
        $items[] = '/?p=' . $post->ID;
    }
    return $items;
}, 10, 2);
```

Note: CloudFront invalidation with query parameters may have limitations and should be tested thoroughly.

## Key Implementation Points

### Configuration
- AWS credentials can be provided in three ways:
  1. Environment variables: `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `C3_DISTRIBUTION_ID`
  2. WordPress options table (stored through Settings UI)
  3. Custom filters for programmatic override

### CloudFront Invalidation
- Invalidations are triggered when:
  - Posts change status to/from "publish"
  - Manual invalidation is requested through admin UI
  - WP-CLI commands are executed
- CloudFront API has a limit of 1000 paths per invalidation request
- The plugin implements batching and cron jobs to handle large invalidation requests

### Code Architecture
- Follows a service-based architecture with clear separation of concerns
- Core services:
  - `Invalidation_Service`: Manages the invalidation process
  - `CloudFront_Service`: Handles AWS API interactions
  - `Invalidation_Batch_Service`: Creates invalidation batches
  - Various WordPress integration services (Hooks, Options, Transient)

### Batching & Performance
- Uses cron jobs to handle invalidation overflow
- Implements retry mechanisms for failed invalidations
- Default invalidation interval is 1 minute (customizable via filter)
- Default invalidation limit is 100 items (customizable via filter)

### Extension Points
- Multiple filters available for customization:
  - `c3_invalidation_interval`: Change invalidation interval
  - `c3_invalidation_cron_interval`: Change retry interval
  - `c3_invalidation_item_limits`: Change invalidation path limit
  - `c3_invalidation_items`: Customize invalidation paths
  - `c3_credential`: Override AWS credentials programmatically
  - `c3_log_cron_invalidation_task`: Enable logging for debugging

### Error Handling
- Implements proper AWS exception handling
- Provides admin notices for success/error states
- Logs errors for debugging purposes

### Custom AWS Implementation
- Direct CloudFront API communication using custom HTTP client
- AWS Signature Version 4 implementation for authentication
- Always uses 'us-east-1' region for CloudFront operations
- Implements credential verification before operations

### Best Practices
- Use environment variables for credentials in production
- Implement custom filters for fine-grained control
- Monitor invalidation history for quota management
- Consider implementing custom path invalidation for high-traffic sites